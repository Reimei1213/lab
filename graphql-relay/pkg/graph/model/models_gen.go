// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
	GetID() string
}

type AddCardInput struct {
	Title  string  `json:"title"`
	UserID *string `json:"userId,omitempty"`
}

type AddCardPayload struct {
	ID string `json:"id"`
}

type AddUserInput struct {
	Name string `json:"name"`
}

type AddUserPayload struct {
	ID string `json:"id"`
}

type Card struct {
	ID           string     `json:"id"`
	Title        string     `json:"title"`
	Status       CardStatus `json:"status"`
	AssignedUser *User      `json:"assignedUser,omitempty"`
}

func (Card) IsNode()            {}
func (this Card) GetID() string { return this.ID }

type Connection struct {
	Edges    []*Edge   `json:"edges,omitempty"`
	Nodes    []Node    `json:"nodes,omitempty"`
	PageInfo *PageInfo `json:"pageInfo"`
}

type Edge struct {
	Cursor string `json:"cursor"`
	Node   Node   `json:"node"`
}

type Mutation struct {
}

type NoopInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

type NoopPayload struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

type PageInfo struct {
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	HasNextPage     bool    `json:"hasNextPage"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Query struct {
}

type User struct {
	ID    string      `json:"id"`
	Name  string      `json:"name"`
	Cards *Connection `json:"cards"`
}

func (User) IsNode()            {}
func (this User) GetID() string { return this.ID }

type CardStatus string

const (
	CardStatusTodo  CardStatus = "TODO"
	CardStatusDoing CardStatus = "DOING"
	CardStatusDone  CardStatus = "DONE"
)

var AllCardStatus = []CardStatus{
	CardStatusTodo,
	CardStatusDoing,
	CardStatusDone,
}

func (e CardStatus) IsValid() bool {
	switch e {
	case CardStatusTodo, CardStatusDoing, CardStatusDone:
		return true
	}
	return false
}

func (e CardStatus) String() string {
	return string(e)
}

func (e *CardStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CardStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CardStatus", str)
	}
	return nil
}

func (e CardStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
