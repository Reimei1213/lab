package controllers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"log/slog"

	"github.com/Reimei1213/lab/graphql-relay/interface/presenter"
	"github.com/Reimei1213/lab/graphql-relay/pkg/graph"
	"github.com/Reimei1213/lab/graphql-relay/pkg/graph/model"
	"github.com/Reimei1213/lab/graphql-relay/pkg/graph/pagination"
)

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, input model.AddUserInput) (*model.AddUserPayload, error) {
	id, err := r.UserInputport.Create(ctx, &input)
	if err != nil {
		slog.Error("failed to create user", "err", err)
		return nil, err
	}
	return &model.AddUserPayload{ID: pagination.EncodeGraphqlID(presenter.NodeTypeUser, id)}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, first *int, after *string, last *int, before *string) (*model.Connection, error) {
	var afterCursor, beforeCursor *string

	if after != nil {
		_, id, err := pagination.DecodeGraphqlID(*after)
		if err != nil {
			return nil, err
		}
		afterCursor = &id
	}
	if before != nil {
		_, id, err := pagination.DecodeGraphqlID(*before)
		if err != nil {
			return nil, err
		}
		beforeCursor = &id
	}
	res, err := r.UserInputport.List(ctx, first, afterCursor, last, beforeCursor)
	if err != nil {
		slog.Error("failed to get users", "err", err)
		return nil, err
	}
	return pagination.NewConnection(presenter.NewUsers(res.Users), res.HasNextPage, res.HasPreviousPage), nil
}

// Cards is the resolver for the cards field.
func (r *userResolver) Cards(ctx context.Context, obj *model.User, first *int, after *string, last *int, before *string) (*model.Connection, error) {
	panic(fmt.Errorf("not implemented: Cards - cards"))
}

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
