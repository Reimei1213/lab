package controllers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"log/slog"

	"github.com/Reimei1213/lab/graphql/interface/presenter"
	"github.com/Reimei1213/lab/graphql/pkg/graph"
	"github.com/Reimei1213/lab/graphql/pkg/graph/model"
)

// Noop is the resolver for the noop field.
func (r *mutationResolver) Noop(ctx context.Context, input *model.NoopInput) (*model.NoopPayload, error) {
	panic(fmt.Errorf("not implemented: Noop - noop"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (model.Node, error) {
	nodeType, id, err := presenter.DecodeGraphqlID(id)
	if err != nil {
		slog.Error("failed to decode graphql id", "err", err)
		return nil, err
	}

	switch nodeType {
	case presenter.NodeTypeUser:
		u, err := r.UserInputport.Get(ctx, id)
		if err != nil {
			slog.Error("failed to get user", "err", err)
			return nil, err
		}
		return presenter.NewUser(u).ToGraphqlModel(), nil
	case presenter.NodeTypeCard:
		c, err := r.CardInputport.Get(ctx, id)
		if err != nil {
			slog.Error("failed to get card", "err", err)
			return nil, err
		}
		return presenter.NewCard(c).ToGraphqlModel(), nil
	}

	return nil, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
